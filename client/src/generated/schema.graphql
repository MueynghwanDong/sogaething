# source: http://3.34.131.20:8080/graphql
# timestamp: Mon Jun 01 2020 20:30:58 GMT+0900 (GMT+09:00)

"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

type Autocomplete {
  hashtag: String
  count: Int
}

input CreateDetailDealInput {
  postId: Int!
}

input CreateFileInput {
  productId: Int
  imgPath: String
}

input CreateHashtagInput {
  productId: Int
  hashtag: String
}

input CreateJjimInput {
  postId: Int!
}

type CreateOutput {
  state: String
  postId: Int
}

input CreatePostInput {
  title: String!
  category: String!
  imgPaths: [String]
  hashtag: [String]
  contents: String!
  transaction: String!
  price: Int!
}

input CreateProductInput {
  postId: Int!
  price: Int!
  name: String!
  category: String!
}

type DetailDeal {
  dealId: ID!
  post: Post!
  user: User!
  createdDate: String
  modifiedDate: String
}

type DetailOutput {
  dealId: ID
  postId: Int
  imgPaths: [String]
  title: String
  category: String
  hashtag: [String]
  contents: String
  price: Int
  buyerId: Int
  sellerId: Int
  user: UserInfoResponse
  createdDate: String
  modifiedDate: String
}

type File {
  fileId: ID
  product: Product
  imgPath: String
}

type FileOutput {
  fileId: Int
  productId: Int
  imgPath: String
}

type Hashtag {
  hashtagId: ID
  product: Product
  hashtag: String
}

input HashtagInput {
  hashtag: [String]
}

type HashtagOutput {
  hashtagId: ID
  productId: Int
  hashtag: String
}

type HistoryOutput {
  userId: Int
  postId: Int
  createdDate: String
  modifiedDate: String
}

type Jjim {
  jjimId: ID
  user: User
  post: Post
  createdDate: String
  modifiedDate: String
}

type JjimOutput {
  jjimId: Int
  postId: Int
  title: String
  category: String
  imgPath: String
  price: Int
  createdDate: String
  modifiedDate: String
}

input LoginUserInput {
  provider: String
  token: String
}

type LoginUserOutput {
  token: String!
}

type Matching {
  matchingId: ID
  user: User
  category: String
  hashtag: String
  minPrice: Int
  maxPrice: Int
  transaction: String
  createdDate: String
  modifiedDate: String
}

input MatchInput {
  category: String
  price: [Int]
  hashtag: [String]
  transaction: String
}

type Mutation {
  updateView(postId: Int!): Int!
  updateIsBuy(postId: Int!): Int!
  createPost(input: CreatePostInput!): CreateOutput
  updatePost(input: UpdatePostInput!): PostOutput
  deletePost(postId: Int!): Int!
  createFile(input: CreateFileInput!): FileOutput
  updateFile(input: UpdateFileInput!): FileOutput
  deleteFile(id: Int!): Int
  createDetailDeal(input: CreateDetailDealInput!): DetailOutput
  deleteDetailDeal(id: Int!): Int!
  loginUser(input: LoginUserInput!): LoginUserOutput
  updateUser(input: UpdateUserInput!): UserOutput
  deleteUser(id: Int!): Int
  createHashtag(input: CreateHashtagInput!): HashtagOutput
  updateHashtag(input: UpdateHashtagInput!): HashtagOutput
  deleteHashtag(id: Int!): Int
  createMatching(input: MatchInput!): Matching
  updateProduct(input: UpdateProductInput!): ProductOutput
  createProduct(input: CreateProductInput!): ProductOutput
  deleteProduct(id: Int!): Int
  createJjim(input: CreateJjimInput!): Jjim
  deleteJjim(jjimId: Int): Int
  createHistory(postId: Int!): HistoryOutput
}

type Post {
  postId: ID
  userId: Int
  isBuy: Boolean
  title: String
  saleDate: String
  contents: String
  viewCount: Int
  deal: String
  dealState: String
  createdDate: String
  modifiedDate: String
}

type PostDetailOutput {
  postId: ID
  title: String
  category: String
  imgPaths: [String]
  hashtag: [String]
  contents: String
  price: Int
  user: UserInfoResponse
  viewCount: Int
  isBuy: Boolean
  deal: String
  dealState: String
  saleDate: String
  transaction: String
  createdDate: String
  modifiedDate: String
}

type PostMetaOutput {
  postId: Int
  title: String
  category: String
  imgPath: String
  price: Int
  hashtag: [String]
  isBuy: Boolean
  viewCount: Int
  deal: String
  dealState: String
  saleDate: String
  transaction: String
  createdDate: String
  modifiedDate: String
}

type PostOutput {
  postId: ID!
  userId: Int

  """게시자 id"""
  isBuy: Boolean

  """구매 or 판매"""
  title: String
  contents: String
  deal: String
  dealState: String
  category: String
  name: String
  hashtag: [String]
  imgPaths: [File]
}

type Product {
  productId: ID
  post: Post
  name: String
  price: Int
  category: String
}

type ProductOutput {
  productId: ID
  postId: Int
  name: String
  price: Int
  category: String
}

type Query {
  findAllPosts: [Post]
  findAllPost: [PostOutput]

  """findByUser(userId : Int) : [PostOutput]"""
  findPostByPostId(id: Int): PostOutput

  """
  findAllPostsByUploaderId(uploader_id: Int):[Post]
     findAllPostsByUploaderId(uploader_id: Int):[Post]
     findPostByPostId(id: Int): Post
  """
  findRecentPosts: [RecentPostResponse]
  findPostListByUserId(userId: Int): [PostMetaOutput]
  findByDetailPost(postId: Int): PostDetailOutput

  """
  findAllPostsByUploaderId(uploader_id: Int):[Post]
  findElAllPosts: [Post]
  """
  searchThings(input: HashtagInput!): [PostMetaOutput]
  matchThings(input: MatchInput!): [PostDetailOutput]
  findAllFile: [FileOutput]
  findAllFiles: [File]
  findFileById(id: Int): FileOutput
  findAllDetailDeals: [DetailDeal]
  findAllDetailDeal: [DetailOutput]
  findDetailDealByPost(postId: Int): DetailOutput
  findAllUsers: [User]
  findAllUser: [UserOutput]
  findUserInfo: UserInfoResponse
  findAllHashtags: [Hashtag]
  findAllHashtag: [HashtagOutput]
  findByHashtagId(id: Int): HashtagOutput
  autocomplete(hashtag: String!): [Autocomplete]
  findMatchingByUserId: [Matching]
  findAllProduct: [ProductOutput]
  findAllProducts: [Product]
  findByProductId(id: Int): ProductOutput
  findPostByUserId(userId: Int): [JjimOutput]
  findUserHistoryByUserId: [UserHistoryResponse]
}

type RecentPostResponse {
  postId: String
  user: User
  hashTags: [Hashtag]
  isBuy: Boolean
  price: Int
  saleDate: String
  imgUrls: [File]
  category: String
  deal: String
  createdDate: String
  modifiedDate: String
}

input UpdateFileInput {
  fileId: Int
  imgPath: String
}

input UpdateHashtagInput {
  hashtagId: Int
  hashtag: String
}

input UpdatePostInput {
  postId: Int!
  title: String!
  contents: String!
  deal: String!
  dealState: String!
  category: String!
  productname: String!
  price: Int!
  hashtag: String!
  imgPaths: String!
}

input UpdateProductInput {
  productId: ID!
  postId: Int!
  price: Int!
  name: String!
  category: String!
}

input UpdateUserInput {
  imageUrl: String
  phone: String
  address: String
  trust: Int
}

type User {
  userId: ID
  name: String
  email: String
  imageUrl: String
  provider: String
  providerId: Int
  phone: String
  address: String
  trust: Int
}

type UserHistoryResponse {
  user: User
  postId: ID
  isBuy: Boolean
  title: String
  saleDate: String
  contents: String
  viewCount: Int
  deal: String
  createdDate: String
  modifiedDate: String
  hashTags: [Hashtag]
  price: Int
  imgUrls: [File]
}

type UserInfoResponse {
  name: String
  address: String
  trust: Int
  numOfPosts: Int
  imgurl: String
}

type UserOutput {
  userId: ID
  name: String
  email: String
  imageUrl: String
  provider: String
  providerId: Int
  phone: String
  address: String
  trust: Int
}
