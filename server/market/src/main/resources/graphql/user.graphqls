type User {
    userId : ID
    name : String
    email : String
    imageUrl : String
    provider : String
    providerId : Int
    phone : String
    address : String
    trust : Int
}

type LoginUserOutput {
    token : String!
}
type UserOutput{
    userId : ID
    name : String
    email : String
    imageUrl : String
    provider : String
    providerId : Int
    phone : String
    address : String
    trust : Int
}

type UserInfoOutput {
    name : String
    address : String
    trust : Int
    numOfPosts : Int
}

type UserInfoResponse {
    name: String
    address: String
    trust: Int
    numOfPosts: Int
    imgurl: String
}

input LoginUserInput {
    provider : String
    token : String
}

input UpdateUserInput{
    imageUrl : String
    phone : String
    address : String
    trust : Int
}

extend type Query {
    findAllUsers: [User]
    findAllUser: [UserOutput]
    findUserInfo: UserInfoResponse
}

extend type Mutation {
    loginUser(input : LoginUserInput!): LoginUserOutput
    updateUser(input : UpdateUserInput!) : UserOutput
    deleteUser(id : Int!) : Int
}